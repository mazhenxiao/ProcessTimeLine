"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Apply_1 = require("./Apply");
var Option_1 = require("./Option");
var Ord_1 = require("./Ord");
var Setoid_1 = require("./Setoid");
var function_1 = require("./function");
exports.URI = 'Array';
/**
 * @function
 * @since 1.0.0
 */
exports.getMonoid = function () {
    return {
        concat: function_1.concat,
        empty: []
    };
};
/**
 * Derives a Setoid over the Array of a given element type from the Setoid of that type. The derived setoid defines two
 * arrays as equal if all elements of both arrays are compared equal pairwise with the given setoid 'S'. In case of
 * arrays of different lengths, the result is non equality.
 *
 * @constant
 * @since 1.0.0
 */
exports.getSetoid = Setoid_1.getArraySetoid;
/**
 * Derives an Order over the Array of a given element type from the Order, 'O', of that type. The ordering between two
 * such arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order,
 * in case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
 * the same length, the result is equality.
 *
 * @function
 * @since 1.2.0
 */
exports.getOrd = function (O) { return (__assign({}, exports.getSetoid(O), { compare: function (a, b) {
        var aLen = a.length;
        var bLen = b.length;
        var len = Math.min(aLen, bLen);
        for (var i = 0; i < len; i++) {
            var order = O.compare(a[i], b[i]);
            if (order !== 0) {
                return order;
            }
        }
        return Ord_1.ordNumber.compare(aLen, bLen);
    } })); };
var map = function (fa, f) {
    var l = fa.length;
    var r = new Array(l);
    for (var i = 0; i < l; i++) {
        r[i] = f(fa[i]);
    }
    return r;
};
var of = function (a) {
    return [a];
};
var ap = function (fab, fa) {
    return exports.flatten(map(fab, function (f) { return map(fa, f); }));
};
var chain = function (fa, f) {
    var resLen = 0;
    var l = fa.length;
    var temp = new Array(l);
    for (var i = 0; i < l; i++) {
        var e = fa[i];
        var arr = f(e);
        resLen += arr.length;
        temp[i] = arr;
    }
    var r = Array(resLen);
    var start = 0;
    for (var i = 0; i < l; i++) {
        var arr = temp[i];
        var l_1 = arr.length;
        for (var j = 0; j < l_1; j++) {
            r[j + start] = arr[j];
        }
        start += l_1;
    }
    return r;
};
var reduce = function (fa, b, f) {
    var l = fa.length;
    var r = b;
    for (var i = 0; i < l; i++) {
        r = f(r, fa[i]);
    }
    return r;
};
/**
 * @function
 * @since 1.0.0
 */
function traverse(F) {
    var liftedSnoc = Apply_1.liftA2(F)(function (as) { return function (a) { return exports.snoc(as, a); }; });
    return function (ta, f) { return reduce(ta, F.of(zero()), function (fab, a) { return liftedSnoc(fab)(f(a)); }); };
}
exports.traverse = traverse;
var zero = function () { return []; };
var alt = function_1.concat;
var unfoldr = function (b, f) {
    var ret = [];
    var bb = b;
    while (true) {
        var mt = f(bb);
        if (mt.isSome()) {
            var _a = mt.value, a = _a[0], b_1 = _a[1];
            ret.push(a);
            bb = b_1;
        }
        else {
            break;
        }
    }
    return ret;
};
var extend = function (fa, f) {
    return fa.map(function (_, i, as) { return f(as.slice(i)); });
};
/**
 * @function
 * @since 1.0.0
 */
exports.partitionMap = function (fa, f) {
    var left = [];
    var right = [];
    var len = fa.length;
    for (var i = 0; i < len; i++) {
        var v = f(fa[i]);
        if (v.isLeft()) {
            left.push(v.value);
        }
        else {
            right.push(v.value);
        }
    }
    return { left: left, right: right };
};
/**
 * @example
 * flatten([[1], [2], [3]]) // [1, 2, 3]
 *
 * @function
 * @since 1.0.0
 */
exports.flatten = function (ffa) {
    var rLen = 0;
    var len = ffa.length;
    for (var i = 0; i < len; i++) {
        rLen += ffa[i].length;
    }
    var r = Array(rLen);
    var start = 0;
    for (var i = 0; i < len; i++) {
        var arr = ffa[i];
        var l = arr.length;
        for (var j = 0; j < l; j++) {
            r[j + start] = arr[j];
        }
        start += l;
    }
    return r;
};
/**
 * Break an array into its first element and remaining elements
 * @function
 * @since 1.0.0
 */
exports.fold = function (as, b, cons) {
    return exports.isEmpty(as) ? b : cons(as[0], as.slice(1));
};
/**
 * Lazy version of `fold`
 * @function
 * @since 1.0.0
 */
exports.foldL = function (as, nil, cons) {
    return exports.isEmpty(as) ? nil() : cons(as[0], as.slice(1));
};
/**
 * Same as `reduce` but it carries over the intermediate steps
 *
 * ```ts
 * scanLeft([1, 2, 3], 10, (b, a) => b - a) // [ 10, 9, 7, 4 ]
 * ```
 *
 * @function
 * @since 1.1.0
 */
exports.scanLeft = function (as, b, f) {
    var l = as.length;
    var r = new Array(l + 1);
    r[0] = b;
    for (var i = 0; i < l; i++) {
        r[i + 1] = f(r[i], as[i]);
    }
    return r;
};
/**
 * Fold an array from the right, keeping all intermediate results instead of only the final result
 *
 * ```ts
 * scanRight([1, 2, 3], 10, (a, b) => b - a) // [ 4, 5, 7, 10 ]
 * ```
 *
 * @function
 * @since 1.1.0
 */
exports.scanRight = function (as, b, f) {
    var l = as.length;
    var r = new Array(l + 1);
    r[l] = b;
    for (var i = l - 1; i >= 0; i--) {
        r[i] = f(as[i], r[i + 1]);
    }
    return r;
};
/**
 * Test whether an array is empty
 * @function
 * @since 1.0.0
 */
exports.isEmpty = function (as) {
    return as.length === 0;
};
/**
 * Test whether an array contains a particular index
 * @function
 * @since 1.0.0
 */
exports.isOutOfBound = function (i, as) {
    return i < 0 || i >= as.length;
};
/**
 * This function provides a safe way to read a value at a particular index from an array
 * @function
 * @since 1.0.0
 */
exports.index = function (i, as) {
    return exports.isOutOfBound(i, as) ? Option_1.none : Option_1.some(as[i]);
};
/**
 * Attaches an element to the front of an array, creating a new array
 * @function
 * @since 1.0.0
 */
exports.cons = function (a, as) {
    var len = as.length;
    var r = Array(len + 1);
    for (var i = 0; i < len; i++) {
        r[i + 1] = as[i];
    }
    r[0] = a;
    return r;
};
/**
 * Append an element to the end of an array, creating a new array
 * @function
 * @since 1.0.0
 */
exports.snoc = function (as, a) {
    var len = as.length;
    var r = Array(len + 1);
    for (var i = 0; i < len; i++) {
        r[i] = as[i];
    }
    r[len] = a;
    return r;
};
/**
 * Get the first element in an array, or `None` if the array is empty
 * @function
 * @since 1.0.0
 */
exports.head = function (as) {
    return exports.isEmpty(as) ? Option_1.none : Option_1.some(as[0]);
};
/**
 * Get the last element in an array, or `None` if the array is empty
 * @function
 * @since 1.0.0
 */
exports.last = function (as) {
    return exports.index(as.length - 1, as);
};
/**
 * Get all but the first element of an array, creating a new array, or `None` if the array is empty
 * @function
 * @since 1.0.0
 */
exports.tail = function (as) {
    return exports.isEmpty(as) ? Option_1.none : Option_1.some(as.slice(1));
};
/**
 * Get all but the last element of an array, creating a new array, or `None` if the array is empty
 * @function
 * @since 1.0.0
 */
exports.init = function (as) {
    var len = as.length;
    return len === 0 ? Option_1.none : Option_1.some(as.slice(0, len - 1));
};
/**
 * Keep only a number of elements from the start of an array, creating a new array
 * @function
 * @since 1.0.0
 */
exports.take = function (n, as) {
    return as.slice(0, n);
};
var spanIndexUncurry = function (as, predicate) {
    var l = as.length;
    var i = 0;
    for (; i < l; i++) {
        if (!predicate(as[i])) {
            break;
        }
    }
    return i;
};
/**
 * Split an array into two parts:
 * 1. the longest initial subarray for which all elements satisfy the specified predicate
 * 2. the remaining elements
 * @function
 * @since 1.0.0
 */
exports.span = function (as, predicate) {
    var i = spanIndexUncurry(as, predicate);
    var init = Array(i);
    for (var j = 0; j < i; j++) {
        init[j] = as[j];
    }
    var l = as.length;
    var rest = Array(l - i);
    for (var j = i; j < l; j++) {
        rest[j - i] = as[j];
    }
    return { init: init, rest: rest };
};
/**
 * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 * @function
 * @since 1.0.0
 */
exports.takeWhile = function (as, predicate) {
    var i = spanIndexUncurry(as, predicate);
    var init = Array(i);
    for (var j = 0; j < i; j++) {
        init[j] = as[j];
    }
    return init;
};
/**
 * Drop a number of elements from the start of an array, creating a new array
 * @function
 * @since 1.0.0
 */
exports.drop = function (n, as) {
    return as.slice(n, as.length);
};
/**
 * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 * @function
 * @since 1.0.0
 */
exports.dropWhile = function (as, predicate) {
    var i = spanIndexUncurry(as, predicate);
    var l = as.length;
    var rest = Array(l - i);
    for (var j = i; j < l; j++) {
        rest[j - i] = as[j];
    }
    return rest;
};
/**
 * Find the first index for which a predicate holds
 * @function
 * @since 1.0.0
 */
exports.findIndex = function (as, predicate) {
    var len = as.length;
    for (var i = 0; i < len; i++) {
        if (predicate(as[i])) {
            return Option_1.some(i);
        }
    }
    return Option_1.none;
};
/**
 * Find the first element which satisfies a predicate function
 * @function
 * @since 1.0.0
 */
exports.findFirst = function (as, predicate) {
    return Option_1.fromNullable(as.find(predicate));
};
/**
 * Find the last element which satisfies a predicate function
 * @function
 * @since 1.0.0
 */
exports.findLast = function (as, predicate) {
    var len = as.length;
    var a = null;
    for (var i = len - 1; i >= 0; i--) {
        if (predicate(as[i])) {
            a = as[i];
            break;
        }
    }
    return Option_1.fromNullable(a);
};
/**
 * Filter an array, keeping the elements which satisfy a predicate function, creating a new array
 * @function
 * @since 1.0.0
 */
exports.filter = function (as, predicate) {
    var l = as.length;
    var r = [];
    for (var i = 0; i < l; i++) {
        var v = as[i];
        if (predicate(v)) {
            r.push(v);
        }
    }
    return r;
};
/**
 * @function
 * @since 1.0.0
 */
exports.refine = function (as, refinement) {
    return exports.filter(as, refinement);
};
/**
 * @function
 * @since 1.0.0
 */
exports.copy = function (as) {
    var l = as.length;
    var r = Array(l);
    for (var i = 0; i < l; i++) {
        r[i] = as[i];
    }
    return r;
};
/**
 * @function
 * @since 1.0.0
 */
exports.unsafeInsertAt = function (i, a, as) {
    var xs = exports.copy(as);
    xs.splice(i, 0, a);
    return xs;
};
/**
 * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds
 * @function
 * @since 1.0.0
 */
exports.insertAt = function (i, a, as) {
    return i < 0 || i > as.length ? Option_1.none : Option_1.some(exports.unsafeInsertAt(i, a, as));
};
/**
 * @function
 * @since 1.0.0
 */
exports.unsafeUpdateAt = function (i, a, as) {
    var xs = exports.copy(as);
    xs[i] = a;
    return xs;
};
/**
 * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
 * @function
 * @since 1.0.0
 */
exports.updateAt = function (i, a, as) {
    return exports.isOutOfBound(i, as) ? Option_1.none : Option_1.some(exports.unsafeUpdateAt(i, a, as));
};
/**
 * @function
 * @since 1.0.0
 */
exports.unsafeDeleteAt = function (i, as) {
    var xs = exports.copy(as);
    xs.splice(i, 1);
    return xs;
};
/**
 * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
 * @function
 * @since 1.0.0
 */
exports.deleteAt = function (i, as) {
    return exports.isOutOfBound(i, as) ? Option_1.none : Option_1.some(exports.unsafeDeleteAt(i, as));
};
/**
 * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out
 * of bounds
 * @function
 * @since 1.0.0
 */
exports.modifyAt = function (as, i, f) {
    return exports.isOutOfBound(i, as) ? Option_1.none : exports.updateAt(i, f(as[i]), as);
};
/**
 * Reverse an array, creating a new array
 * @function
 * @since 1.0.0
 */
exports.reverse = function (as) {
    return exports.copy(as).reverse();
};
/**
 * Apply a function to each element in an array, keeping only the results
 * which contain a value, creating a new array
 * @function
 * @since 1.0.0
 */
exports.mapOption = function (as, f) {
    var r = [];
    var len = as.length;
    for (var i = 0; i < len; i++) {
        var v = f(as[i]);
        if (v.isSome()) {
            r.push(v.value);
        }
    }
    return r;
};
/**
 * Filter an array of optional values, keeping only the elements which contain a value, creating a new array
 * @function
 * @since 1.0.0
 */
exports.catOptions = function (as) {
    return exports.mapOption(as, function_1.identity);
};
/**
 * Extracts from a list of `Either` all the `Right` elements. All the `Right` elements are extracted in order
 * @function
 * @since 1.0.0
 */
exports.rights = function (as) {
    var r = [];
    var len = as.length;
    for (var i = 0; i < len; i++) {
        var a = as[i];
        if (a.isRight()) {
            r.push(a.value);
        }
    }
    return r;
};
/**
 * Extracts from a list of `Either` all the `Left` elements. All the `Left` elements are extracted in order
 * @function
 * @since 1.0.0
 */
exports.lefts = function (as) {
    var r = [];
    var len = as.length;
    for (var i = 0; i < len; i++) {
        var a = as[i];
        if (a.isLeft()) {
            r.push(a.value);
        }
    }
    return r;
};
/**
 * Sort the elements of an array in increasing order, creating a new array
 * @function
 * @since 1.0.0
 */
exports.sort = function (O) { return function (as) {
    return exports.copy(as).sort(O.compare);
}; };
/**
 * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
 * input array is short, excess elements of the longer array are discarded.
 * @function
 * @since 1.0.0
 */
exports.zipWith = function (fa, fb, f) {
    var fc = [];
    var len = Math.min(fa.length, fb.length);
    for (var i = 0; i < len; i++) {
        fc[i] = f(fa[i], fb[i]);
    }
    return fc;
};
/**
 * Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the
 * longer array are discarded
 * @function
 * @since 1.0.0
 */
exports.zip = function (fa, fb) {
    return exports.zipWith(fa, fb, function_1.tuple);
};
/**
 * Rotate an array to the right by `n` steps
 * @function
 * @since 1.0.0
 */
exports.rotate = function (n, xs) {
    var len = xs.length;
    if (n === 0 || len <= 1 || len === Math.abs(n)) {
        return xs;
    }
    else if (n < 0) {
        return exports.rotate(len + n, xs);
    }
    else {
        return xs.slice(-n).concat(xs.slice(0, len - n));
    }
};
/**
 * Test if a value is a member of an array
 * @function
 * @since 1.3.0
 */
exports.member = function (S) { return function (as, a) {
    var predicate = function (e) { return S.equals(e, a); };
    var i = 0;
    var len = as.length;
    for (; i < len; i++) {
        if (predicate(as[i])) {
            return true;
        }
    }
    return false;
}; };
/**
 * Remove duplicates from an array, keeping the first occurance of an element.
 * @function
 * @since 1.3.0
 */
exports.uniq = function (S) {
    var memberS = exports.member(S);
    return function (as) {
        var r = [];
        var len = as.length;
        var i = 0;
        for (; i < len; i++) {
            var a = as[i];
            if (!memberS(r, a)) {
                r.push(a);
            }
        }
        return len === r.length ? as : r;
    };
};
/**
 * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
 * etc...
 * @function
 * @since 1.3.0
 */
exports.sortBy = function (ords) {
    return exports.fold(ords, Option_1.none, function (head, tail) { return Option_1.some(exports.sortBy1(head, tail)); });
};
/**
 * Non failing version of `sortBy`
 * @function
 * @since 1.3.0
 */
exports.sortBy1 = function (head, tail) {
    return exports.sort(tail.reduce(Ord_1.getSemigroup().concat, head));
};
exports.array = {
    URI: exports.URI,
    map: map,
    of: of,
    ap: ap,
    chain: chain,
    reduce: reduce,
    unfoldr: unfoldr,
    traverse: traverse,
    zero: zero,
    alt: alt,
    extend: extend
};
//# sourceMappingURL=Array.js.map