"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Option_1 = require("./Option");
var Traversable_1 = require("./Traversable");
var function_1 = require("./function");
/**
 * Replicate a value some natural number of times.
 *
 * @example
 * import { replicate } from 'fp-ts/lib/Unfoldable'
 * import { array } from 'fp-ts/lib/Array'
 *
 * assert.deepEqual(replicate(array)('s', 2), ['s', 's'])
 *
 * @function
 * @since 1.0.0
 */
function replicate(U) {
    return function (a, n) {
        function step(n) {
            return n <= 0 ? Option_1.none : Option_1.option.of(function_1.tuple(a, n - 1));
        }
        return U.unfoldr(n, step);
    };
}
exports.replicate = replicate;
/**
 * The container with no elements - unfolded with zero iterations.
 *
 * @example
 * import { empty } from 'fp-ts/lib/Unfoldable'
 * import { array } from 'fp-ts/lib/Array'
 *
 * assert.deepEqual(empty(array), [])
 *
 * @function
 * @since 1.0.0
 */
function empty(U) {
    return U.unfoldr(undefined, function_1.constant(Option_1.none));
}
exports.empty = empty;
/**
 * Contain a single value
 *
 * @example
 * import { singleton } from 'fp-ts/lib/Unfoldable'
 * import { array } from 'fp-ts/lib/Array'
 *
 * assert.deepEqual(singleton(array)(1), [1])
 *
 * @function
 * @since 1.0.0
 */
function singleton(U) {
    var replicateU = replicate(U);
    return function (a) { return replicateU(a, 1); };
}
exports.singleton = singleton;
/**
 * Perform an Applicative action `n` times, and accumulate all the results
 *
 * @example
 * import { replicateA } from 'fp-ts/lib/Unfoldable'
 * import { array } from 'fp-ts/lib/Array'
 * import { option, some } from 'fp-ts/lib/Option'
 *
 * assert.deepEqual(replicateA(option, array)(2, some(1)), some([1, 1]))
 * assert.deepEqual(replicateA(option, array)(2, none), none)
 *
 * @function
 * @since 1.0.0
 */
function replicateA(F, UT) {
    var sequenceFUT = Traversable_1.sequence(F, UT);
    var replicateUT = replicate(UT);
    return function (n, ma) { return sequenceFUT(replicateUT(ma, n)); };
}
exports.replicateA = replicateA;
//# sourceMappingURL=Unfoldable.js.map