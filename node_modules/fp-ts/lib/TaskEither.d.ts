import { Alt2 } from './Alt';
import { Bifunctor2 } from './Bifunctor';
import { Either } from './Either';
import { IO } from './IO';
import { Monad2 } from './Monad';
import { Task } from './Task';
import { Lazy, Predicate } from './function';
import { IOEither } from './IOEither';
declare module './HKT' {
    interface URI2HKT2<L, A> {
        TaskEither: TaskEither<L, A>;
    }
}
export declare const URI = "TaskEither";
export declare type URI = typeof URI;
/**
 * @data
 * @constructor TaskEither
 * @since 1.0.0
 */
export declare class TaskEither<L, A> {
    readonly value: Task<Either<L, A>>;
    readonly _A: A;
    readonly _L: L;
    readonly _URI: URI;
    constructor(value: Task<Either<L, A>>);
    /** Runs the inner `Task` */
    run(): Promise<Either<L, A>>;
    map<B>(f: (a: A) => B): TaskEither<L, B>;
    ap<B>(fab: TaskEither<L, (a: A) => B>): TaskEither<L, B>;
    ap_<B, C>(this: TaskEither<L, (b: B) => C>, fb: TaskEither<L, B>): TaskEither<L, C>;
    /**
     * Combine two effectful actions, keeping only the result of the first
     * @since 1.6.0
     */
    applyFirst<B>(fb: TaskEither<L, B>): TaskEither<L, A>;
    /**
     * Combine two effectful actions, keeping only the result of the second
     * @since 1.5.0
     */
    applySecond<B>(fb: TaskEither<L, B>): TaskEither<L, B>;
    chain<B>(f: (a: A) => TaskEither<L, B>): TaskEither<L, B>;
    fold<R>(whenLeft: (l: L) => R, whenRight: (a: A) => R): Task<R>;
    mapLeft<M>(f: (l: L) => M): TaskEither<M, A>;
    /**
     * Transforms the failure value of the `TaskEither` into a new `TaskEither`
     */
    orElse<M>(f: (l: L) => TaskEither<M, A>): TaskEither<M, A>;
    /**
     * @since 1.6.0
     */
    alt(fy: TaskEither<L, A>): TaskEither<L, A>;
    /**
     * @since 1.2.0
     */
    bimap<V, B>(f: (l: L) => V, g: (a: A) => B): TaskEither<V, B>;
}
/**
 * @function
 * @since 1.0.0
 */
export declare const right: <L, A>(fa: Task<A>) => TaskEither<L, A>;
/**
 * @function
 * @since 1.0.0
 */
export declare const left: <L, A>(fa: Task<L>) => TaskEither<L, A>;
/**
 * @function
 * @since 1.0.0
 */
export declare const fromEither: <L, A>(fa: Either<L, A>) => TaskEither<L, A>;
/**
 * @function
 * @since 1.5.0
 */
export declare const fromIO: <L, A>(fa: IO<A>) => TaskEither<L, A>;
/**
 * @function
 * @since 1.3.0
 */
export declare const fromLeft: <L, A>(l: L) => TaskEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const fromIOEither: <L, A>(fa: IOEither<L, A>) => TaskEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const fromPredicate: <L, A>(predicate: Predicate<A>, whenFalse: (a: A) => L) => (a: A) => TaskEither<L, A>;
/**
 * @function
 * @since 1.0.0
 */
export declare const tryCatch: <L, A>(f: Lazy<Promise<A>>, onrejected: (reason: {}) => L) => TaskEither<L, A>;
/** Convert a node style callback function to one returning a `TaskEither` */
export declare function taskify<L, R>(f: (cb: (e: L | null | undefined, r?: R) => void) => void): () => TaskEither<L, R>;
export declare function taskify<A, L, R>(f: (a: A, cb: (e: L | null | undefined, r?: R) => void) => void): (a: A) => TaskEither<L, R>;
export declare function taskify<A, B, L, R>(f: (a: A, b: B, cb: (e: L | null | undefined, r?: R) => void) => void): (a: A, b: B) => TaskEither<L, R>;
export declare function taskify<A, B, C, L, R>(f: (a: A, b: B, c: C, cb: (e: L | null | undefined, r?: R) => void) => void): (a: A, b: B, c: C) => TaskEither<L, R>;
export declare function taskify<A, B, C, D, L, R>(f: (a: A, b: B, c: C, d: D, cb: (e: L | null | undefined, r?: R) => void) => void): (a: A, b: B, c: C, d: D) => TaskEither<L, R>;
export declare function taskify<A, B, C, D, E, L, R>(f: (a: A, b: B, c: C, d: D, e: E, cb: (e: L | null | undefined, r?: R) => void) => void): (a: A, b: B, c: C, d: D, e: E) => TaskEither<L, R>;
/**
 * @instance
 * @since 1.0.0
 */
export declare const taskEither: Monad2<URI> & Bifunctor2<URI> & Alt2<URI>;
