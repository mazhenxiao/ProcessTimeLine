import { Bifunctor2 } from './Bifunctor';
import { Either } from './Either';
import { Monad2 } from './Monad';
import { IO } from './IO';
import { Lazy } from './function';
import { Alt2 } from './Alt';
declare module './HKT' {
    interface URI2HKT2<L, A> {
        IOEither: IOEither<L, A>;
    }
}
export declare const URI = "IOEither";
export declare type URI = typeof URI;
/**
 * @data
 * @constructor IOEither
 * @since 1.6.0
 */
export declare class IOEither<L, A> {
    readonly value: IO<Either<L, A>>;
    readonly _A: A;
    readonly _L: L;
    readonly _URI: URI;
    constructor(value: IO<Either<L, A>>);
    /**
     * Runs the inner io
     * @since 1.6.0
     */
    run(): Either<L, A>;
    /**
     * @since 1.6.0
     */
    map<B>(f: (a: A) => B): IOEither<L, B>;
    /**
     * @since 1.6.0
     */
    ap<B>(fab: IOEither<L, (a: A) => B>): IOEither<L, B>;
    /**
     * @since 1.6.0
     */
    ap_<B, C>(this: IOEither<L, (b: B) => C>, fb: IOEither<L, B>): IOEither<L, C>;
    /**
     * Combine two effectful actions, keeping only the result of the first
     * @since 1.6.0
     */
    applyFirst<B>(fb: IOEither<L, B>): IOEither<L, A>;
    /**
     * Combine two effectful actions, keeping only the result of the second
     * @since 1.6.0
     */
    applySecond<B>(fb: IOEither<L, B>): IOEither<L, B>;
    /**
     * @since 1.6.0
     */
    chain<B>(f: (a: A) => IOEither<L, B>): IOEither<L, B>;
    /**
     * @since 1.6.0
     */
    fold<R>(left: (l: L) => R, right: (a: A) => R): IO<R>;
    /**
     * @since 1.6.0
     */
    mapLeft<M>(f: (l: L) => M): IOEither<M, A>;
    /**
     * @since 1.6.0
     */
    orElse<M>(f: (l: L) => IOEither<M, A>): IOEither<M, A>;
    /**
     * @since 1.6.0
     */
    alt(fy: IOEither<L, A>): IOEither<L, A>;
    /**
     * @since 1.6.0
     */
    bimap<V, B>(f: (l: L) => V, g: (a: A) => B): IOEither<V, B>;
}
/**
 * @function
 * @since 1.6.0
 */
export declare const right: <L, A>(fa: IO<A>) => IOEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const left: <L, A>(fa: IO<L>) => IOEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const fromEither: <L, A>(fa: Either<L, A>) => IOEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const fromLeft: <L, A>(l: L) => IOEither<L, A>;
/**
 * @function
 * @since 1.6.0
 */
export declare const tryCatch: <A>(f: Lazy<A>, onerror?: (reason: {}) => Error) => IOEither<Error, A>;
/**
 * @instance
 * @since 1.6.0
 */
export declare const ioEither: Monad2<URI> & Bifunctor2<URI> & Alt2<URI>;
