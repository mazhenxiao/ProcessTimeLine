"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Either_1 = require("./Either");
var eitherT = require("./EitherT");
var Task_1 = require("./Task");
var function_1 = require("./function");
var eitherTTask = eitherT.getEitherT(Task_1.task);
exports.URI = 'TaskEither';
var eitherTfold = eitherT.fold(Task_1.task);
var eitherTmapLeft = eitherT.mapLeft(Task_1.task);
var eitherTbimap = eitherT.bimap(Task_1.task);
/**
 * @data
 * @constructor TaskEither
 * @since 1.0.0
 */
var TaskEither = /** @class */ (function () {
    function TaskEither(value) {
        this.value = value;
    }
    /** Runs the inner `Task` */
    TaskEither.prototype.run = function () {
        return this.value.run();
    };
    TaskEither.prototype.map = function (f) {
        return new TaskEither(eitherTTask.map(this.value, f));
    };
    TaskEither.prototype.ap = function (fab) {
        return new TaskEither(eitherTTask.ap(fab.value, this.value));
    };
    TaskEither.prototype.ap_ = function (fb) {
        return fb.ap(this);
    };
    /**
     * Combine two effectful actions, keeping only the result of the first
     * @since 1.6.0
     */
    TaskEither.prototype.applyFirst = function (fb) {
        return fb.ap(this.map(function_1.constant));
    };
    /**
     * Combine two effectful actions, keeping only the result of the second
     * @since 1.5.0
     */
    TaskEither.prototype.applySecond = function (fb) {
        return fb.ap(this.map(function_1.constIdentity));
    };
    TaskEither.prototype.chain = function (f) {
        return new TaskEither(eitherTTask.chain(function (a) { return f(a).value; }, this.value));
    };
    TaskEither.prototype.fold = function (whenLeft, whenRight) {
        return eitherTfold(whenLeft, whenRight, this.value);
    };
    TaskEither.prototype.mapLeft = function (f) {
        return new TaskEither(eitherTmapLeft(f)(this.value));
    };
    /**
     * Transforms the failure value of the `TaskEither` into a new `TaskEither`
     */
    TaskEither.prototype.orElse = function (f) {
        return new TaskEither(this.value.chain(function (e) { return e.fold(function (l) { return f(l).value; }, function (a) { return eitherTTask.of(a); }); }));
    };
    /**
     * @since 1.6.0
     */
    TaskEither.prototype.alt = function (fy) {
        return this.orElse(function () { return fy; });
    };
    /**
     * @since 1.2.0
     */
    TaskEither.prototype.bimap = function (f, g) {
        return new TaskEither(eitherTbimap(this.value, f, g));
    };
    return TaskEither;
}());
exports.TaskEither = TaskEither;
var map = function (fa, f) {
    return fa.map(f);
};
var of = function (a) {
    return new TaskEither(eitherTTask.of(a));
};
var ap = function (fab, fa) {
    return fa.ap(fab);
};
var chain = function (fa, f) {
    return fa.chain(f);
};
var alt = function (fx, fy) {
    return fx.alt(fy);
};
var bimap = function (fa, f, g) {
    return fa.bimap(f, g);
};
var eitherTright = eitherT.right(Task_1.task);
/**
 * @function
 * @since 1.0.0
 */
exports.right = function (fa) {
    return new TaskEither(eitherTright(fa));
};
var eitherTleft = eitherT.left(Task_1.task);
/**
 * @function
 * @since 1.0.0
 */
exports.left = function (fa) {
    return new TaskEither(eitherTleft(fa));
};
var eitherTfromEither = eitherT.fromEither(Task_1.task);
/**
 * @function
 * @since 1.0.0
 */
exports.fromEither = function (fa) {
    return new TaskEither(eitherTfromEither(fa));
};
/**
 * @function
 * @since 1.5.0
 */
exports.fromIO = function (fa) {
    return exports.right(Task_1.fromIO(fa));
};
/**
 * @function
 * @since 1.3.0
 */
exports.fromLeft = function (l) {
    return exports.fromEither(Either_1.left(l));
};
/**
 * @function
 * @since 1.6.0
 */
exports.fromIOEither = function (fa) {
    return new TaskEither(Task_1.fromIO(fa.value));
};
/**
 * @function
 * @since 1.6.0
 */
exports.fromPredicate = function (predicate, whenFalse) {
    var f = Either_1.fromPredicate(predicate, whenFalse);
    return function (a) { return exports.fromEither(f(a)); };
};
/**
 * @function
 * @since 1.0.0
 */
exports.tryCatch = function (f, onrejected) {
    return new TaskEither(Task_1.tryCatch(f, onrejected));
};
/**
 * Convert a node style callback function to one returning a `TaskEither`
 *
 * @example
 * import * as fs from 'fs'
 *
 * // const stat: (a: string | Buffer) => TaskEither<NodeJS.ErrnoException, fs.Stats>
 * const stat = taskify(fs.stat)
 * ```
 *
 * **Note**. If the function `f` admits multiple overloadings, `taskify` will pick last one. If you want a different
 * behaviour, add an explicit type annotation
 *
 * ```ts
 * // readFile admits multiple overloadings
 *
 * // const readFile: (a: string) => TaskEither<NodeJS.ErrnoException, Buffer>
 * const readFile = taskify(fs.readFile)
 *
 * const readFile2: (filename: string, encoding: string) => TaskEither<NodeJS.ErrnoException, Buffer> = taskify(
 *   fs.readFile
 * )
 *
 * @function
 * @since 1.5.0
 */
function taskify(f) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        return new TaskEither(new Task_1.Task(function () {
            return new Promise(function (resolve) {
                args.push(function (e, r) { return (e != null ? resolve(Either_1.left(e)) : resolve(Either_1.right(r))); });
                f.apply(null, args);
            });
        }));
    };
}
exports.taskify = taskify;
/**
 * @instance
 * @since 1.0.0
 */
exports.taskEither = {
    URI: exports.URI,
    bimap: bimap,
    map: map,
    of: of,
    ap: ap,
    chain: chain,
    alt: alt
};
//# sourceMappingURL=TaskEither.js.map